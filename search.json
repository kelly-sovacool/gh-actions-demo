[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "GitHub is a version control platform for tracking, sharing, and collaborating on software projects of all kinds. One of GitHub‚Äôs most powerful features is GitHub Actions, an automation platform that executes lightweight workflows for continuous integration & deployment. In this demonstration, we‚Äôll show you the basics of creating GitHub Actions workflows and walk through examples to help you get started using GitHub Actions in your own repositories. Whether you are a software engineer or an analyst, GitHub Actions can help you automate repetitive tasks like formatting code, running tests, publishing reports, and so much more!",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#audience",
    "href": "index.html#audience",
    "title": "Welcome",
    "section": "Audience",
    "text": "Audience\nThis demo assumes you:\n\nwrite code, whether for analysis projects or for software development\nare already familiar with git1 and GitHub2",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#code-along",
    "href": "index.html#code-along",
    "title": "Welcome",
    "section": "Code along",
    "text": "Code along\nIf you‚Äôd like to code along with this demo, fork the sandbox repo and clone it. During the demo you‚Äôll create files, push changes to your GitHub repo, and see how GitHub Actions works by example.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#video",
    "href": "index.html#video",
    "title": "Welcome",
    "section": "Video",
    "text": "Video\nThis demo was created and presented for the Bioinformatics Training and Education Program (NIH/NCI/CCR). The recorded video is available here.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "Welcome",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nVersion control with Git https://bioinformatics.ccr.cancer.gov/btep/classes/version-control-with-git‚Ü©Ô∏é\nVersion control using GitHub https://bioinformatics.ccr.cancer.gov/btep/classes/version-control-using-github-and-git‚Ü©Ô∏é",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "sections/docs.html",
    "href": "sections/docs.html",
    "title": "Rendering documents",
    "section": "",
    "text": "You can render documents such as Quarto1, R Markdown, and Jupyter notebooks and publish the outputs with GitHub Pages. Analysis notebooks, scheduled reports that crunch data from external databases, and documentation websites for software can all be published automatically with GHA & Pages.\nTake a look at the example quarto document: quarto-report/notebook.qmd2. Let‚Äôs write a workflow to render this document and publish it to the web:\nBefore you can use this workflow, we‚Äôll need to first manually publish it to GitHub Pages.\nOnce this finishes, the rendered report will be available at https://USERNAME.github.io/REPO (replace USERNAME with your actual GitHub username and REPO with your repo name, e.g.¬†gh-actions-sandbox.)\nNow, add the GHA workflow to your repo and it will keep your website up to date.\nThe first time this workflow ran, it took several minutes to complete (here, 6 minutes and 30 seconds). The main bottleneck occurs when installing R packages.\nHowever, the setup-r-dependencies action caches the R packages3, so subsequent runs are significantly faster.\nTake a look at the GitHub Docs for more information on caching dependencies to improve workflow runtime.4",
    "crumbs": [
      "Learn by example",
      "Rendering documents"
    ]
  },
  {
    "objectID": "sections/docs.html#more-workflows-for-rendering-documents",
    "href": "sections/docs.html#more-workflows-for-rendering-documents",
    "title": "Rendering documents",
    "section": "More workflows for rendering documents",
    "text": "More workflows for rendering documents\nIn this example, we rendered a simple Quarto report. There are many other examples workflows you can use to render documents for websites, books, presentations, and more. This demo itself is a quarto website5. See more examples below:\n\nquarto examples (Quarto) https://github.com/quarto-dev/quarto-actions/tree/main/examples\nquarto docs (CCBR) https://github.com/CCBR/actions/blob/main/examples/docs-quarto.yml\nmkdocs (CCBR) https://github.com/CCBR/actions/blob/main/examples/docs-mkdocs.yml\nR Markdown (r-lib) https://github.com/r-lib/actions/blob/v2-branch/examples/render-rmarkdown.yaml",
    "crumbs": [
      "Learn by example",
      "Rendering documents"
    ]
  },
  {
    "objectID": "sections/docs.html#footnotes",
    "href": "sections/docs.html#footnotes",
    "title": "Rendering documents",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nDocumentating Your Analysis with Quarto: https://bioinformatics.ccr.cancer.gov/btep/classes/documenting-your-analysis-with-quarto‚Ü©Ô∏é\nThis document was adapted from an example in the Palmer Penguins documentation https://allisonhorst.github.io/palmerpenguins/articles/examples.html‚Ü©Ô∏é\nSee the docs for r-lib‚Äôs setup-r-dependencies action for more information: https://github.com/r-lib/actions/tree/v2-branch/setup-r-dependencies‚Ü©Ô∏é\nCaching dependencies to speed up workflows: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows‚Ü©Ô∏é\nGHA worfklow for this very website https://github.com/kelly-sovacool/gh-actions-demo/blob/main/.github/workflows/docs-quarto.yml‚Ü©Ô∏é",
    "crumbs": [
      "Learn by example",
      "Rendering documents"
    ]
  },
  {
    "objectID": "sections/ghapi.html",
    "href": "sections/ghapi.html",
    "title": "GitHub API",
    "section": "",
    "text": "The GitHub CLI1 (gh) is a command-line interface to GitHub right from your terminal. Anything the gh CLI can do, you can do with it in GitHub Actions ‚Äì it is pre-installed on all runners.\nLet‚Äôs try automatically adding an issue comment when a label is added to the issue.2\nCreate an issue in your repo and add the ‚Äúhelp wanted‚Äù label. Go the the Actions tab and see if the workflow is running. Once it completes, go back to your issue ‚Äì did it create the comment like you expected?\nPeruse the GitHub CLI manual. What other processes could you automate for managing issues, PRs, and projects?",
    "crumbs": [
      "Learn by example",
      "GitHub API"
    ]
  },
  {
    "objectID": "sections/ghapi.html#footnotes",
    "href": "sections/ghapi.html#footnotes",
    "title": "GitHub API",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nGitHub CLI manual https://cli.github.com/manual/‚Ü©Ô∏é\nThis action was adapted from https://docs.github.com/en/actions/use-cases-and-examples/project-management/commenting-on-an-issue-when-a-label-is-added‚Ü©Ô∏é\nGITHUB_TOKEN https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication‚Ü©Ô∏é\nDefault permissions for GITHUB_TOKEN https://docs.github.com/en/actions/security-for-github-actions/security-guides/automatic-token-authentication#permissions-for-the-github_token‚Ü©Ô∏é\nEnvironment variables needed by gh cli https://cli.github.com/manual/gh_help_environment‚Ü©Ô∏é",
    "crumbs": [
      "Learn by example",
      "GitHub API"
    ]
  },
  {
    "objectID": "sections/intro.html",
    "href": "sections/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "GitHub Actions (GHA) is a service for continuous integration & deployment.\nBut you don‚Äôt have to consider yourself a software engineer to use it! Any repetitive task can potentially be automated with GitHub Actions. Just a few examples:",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#how-to-write-github-actions-workflows",
    "href": "sections/intro.html#how-to-write-github-actions-workflows",
    "title": "Introduction",
    "section": "How to write GitHub Actions workflows",
    "text": "How to write GitHub Actions workflows\nWorkflows are defined as YAML files in a specific directory in your repo: .github/workflows/.\nCreate this directory if you haven‚Äôt already:\nmkdir -p .github/workflows/\nCreate a YAML file:\ntouch .github/workflows/hello-world.yml\nAnd open it in your favorite text editor.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#anatomy-of-a-gha-workflow",
    "href": "sections/intro.html#anatomy-of-a-gha-workflow",
    "title": "Introduction",
    "section": "Anatomy of a GHA workflow",
    "text": "Anatomy of a GHA workflow\n\n\n\n.github/workflows/hello-world.yml\n\n1name: Hello world!\n\n2on: push\n\njobs:\n3  myjob1:\n4    runs-on: ubuntu-latest\n5    steps:\n6      - run: echo \"üéâ Hello world!\"\n7      - run: |\n          echo \"The job was triggered by\"\n          echo \"a ${{ github.event_name }} event.\"\n\n\n1\n\nName of the workflow\n\n2\n\nTriggers: events that cause the workflow to run\n\n3\n\nName of a job. Jobs can run sequentially or in parallel.\n\n4\n\nWhich virtual machine to run the job on\n\n5\n\nList of steps in the job\n\n6\n\nA single step or action that runs bash code\n\n7\n\nA multiline step",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#how-to-run-your-first-workflow",
    "href": "sections/intro.html#how-to-run-your-first-workflow",
    "title": "Introduction",
    "section": "How to run your first workflow",
    "text": "How to run your first workflow\nCopy the above YAML code to .github/workflows/hello-world.yml and save the file.\nAdd, commit, and push your workflow file to GitHub:\ngit add .github/workflows/hello-world.yml\ngit commit -m 'ci: create hello-world workflow'\ngit push\nIn a web browser, navigate to your repo‚Äôs Actions tab. On the left sidebar you‚Äôll see the name of your action: click on it and you‚Äôll see a list of the workflow runs (i.e.¬†times it was executed). Click on the most recent run to see the details of the execution and the logs for each step.\n\n\n\nlog for the ‚ÄúHello world‚Äù workflow",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#actions-steps",
    "href": "sections/intro.html#actions-steps",
    "title": "Introduction",
    "section": "Actions steps",
    "text": "Actions steps\nWriting custom steps for your workflows is powerful, but you‚Äôre not limited to only what you can implement. You can reuse Actions created by others‚Äô, including many that are maintained by GitHub.\n\n\n\n.github/workflows/hello-checkout.yml\n\nname: hello checkout\n\non: push\n\njobs:\n  myjob1:\n    runs-on: ubuntu-latest\n    steps:\n1      - uses: actions/checkout@v4\n2      - name: List files in the repository\n3        run: |\n          ls ${{ github.workspace }}\n\n\n1\n\nUse the action from actions/checkout to checkout the repo. The version is specified with @v4.\n\n2\n\nName of the run step (optional).\n\n3\n\nList the files in the repo, which was checked out to the github.workspace variable.\n\n\ngithub.workspace is a variable defined by GHA1. You can access variables in workflows with a dollar sign and double curly braces: ${{ variable }}.\nThe current working directory is github.workspace by default, and this is where your repo is checked out.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#triggers",
    "href": "sections/intro.html#triggers",
    "title": "Introduction",
    "section": "Triggers",
    "text": "Triggers\nSo far we‚Äôve used the push trigger, which triggers the workflow to run every time a commit is pushed to the repo on GitHub. There are a myriad of triggers2 you can use, and you can mix-and-mitch in the same workflow. Here are a few of the most common triggers:\n\n\n\n.github/workflows/demo-triggers.yml\n\nname: demo triggers\n\non:\n1  push:\n    branches: [ \"main\" ]\n  pull_request:\n    branches: [ \"main\" ]\n2  workflow_dispatch:\n3  schedule:\n    - cron: '0 12 * * 1'\n\njobs:\n  myjob1:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - name: \n        run: |\n4          echo \"Event: ${{ github.event_name }}\"\n\n\n1\n\nTriggers the workflow on push or pull request events, but only for the ‚Äúmain‚Äù branch.\n\n2\n\nAllows you to run this workflow manually from the Actions tab.\n\n3\n\nTriggers the workflow on a cron schedule3. This one runs at 12:00 UTC on every Monday.\n\n4\n\nPrint the event that triggered the run.\n\n\nLet‚Äôs try running this workflow manually! After you add this workflow to your repo, navigate to the Actions tab and click on the workflow name. A button will appear: run workflow. Click it and select the branch you want to run on. Refresh the page and you will see your manually triggered run in the log. What is the value in github.event_name when you run the workflow manually?\n\n\n\nlog for ‚Äúdemo triggers‚Äù when triggered by a push\n\n\n\n\n\nlog for ‚Äúdemo triggers‚Äù when trigged by a manual workflow_dispatch",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#what-now",
    "href": "sections/intro.html#what-now",
    "title": "Introduction",
    "section": "What now?",
    "text": "What now?\nSo far, we‚Äôve learned the basics of how to write Github Actions workflows. Next you‚Äôll see some useful examples of GHA in practice and learn about more advanced features along the way.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/intro.html#footnotes",
    "href": "sections/intro.html#footnotes",
    "title": "Introduction",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nContexts & variables https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#about-contexts‚Ü©Ô∏é\nEvents that trigger workflows https://docs.github.com/en/actions/writing-workflows/choosing-when-your-workflow-runs/events-that-trigger-workflows‚Ü©Ô∏é\nWebsite to help understand cron schedule syntax https://crontab.guru/‚Ü©Ô∏é",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "sections/snakemake.html",
    "href": "sections/snakemake.html",
    "title": "Snakemake example",
    "section": "",
    "text": "You can write and run unit tests for bioinformatics pipelines just like you would for regular software. While testing is strongly encouraged for re-usable pipelines in particular, sometimes unit testing is not a high priority, such as for one-off analysis projects. A more basic check you can do is make sure your pipeline has correct syntax. For Snakemake, you can dry-run and lint the Snakemake workflow to ensure it passes minimal quality standards.\nTake a look at the example Snakemake workflow:\nWe‚Äôll use a GitHub Actions workflow to check that our Snakemake workflow can complete a dry-run and that it passes Snakemake‚Äôs linting checks.\nAdd this new GHA workflow to your repo and see what happens. Do both the dry-run and lint steps complete successfully? Do any changes need to be made to the Snakemake workflow make these steps pass?\nThe dry run succeeded, but the lint step failed because we didn‚Äôt define a log file for the rule in the Snakefile. Let‚Äôs modify it:\nAdd, commit, and push this change to your repo. Now the lint step passes and tells you that the Snakemake workflow is in good condition:",
    "crumbs": [
      "Learn by example",
      "Snakemake example"
    ]
  },
  {
    "objectID": "sections/snakemake.html#more-workflows-for-bioinformatics-pipelines",
    "href": "sections/snakemake.html#more-workflows-for-bioinformatics-pipelines",
    "title": "Snakemake example",
    "section": "More workflows for bioinformatics pipelines",
    "text": "More workflows for bioinformatics pipelines\n\nSnakemake (CCBR) https://github.com/CCBR/actions/blob/main/examples/build-snakemake.yml\nNextflow (CCBR) https://github.com/CCBR/actions/blob/main/examples/build-nextflow.yml\nNextflow (nf-core) https://github.com/nf-core/rnaseq/blob/master/.github/workflows/ci.yml",
    "crumbs": [
      "Learn by example",
      "Snakemake example"
    ]
  },
  {
    "objectID": "sections/snakemake.html#footnotes",
    "href": "sections/snakemake.html#footnotes",
    "title": "Snakemake example",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nRunning jobs in a container: https://docs.github.com/en/actions/writing-workflows/choosing-where-your-workflow-runs/running-jobs-in-a-container‚Ü©Ô∏é\nResources for standard GitHub runners: https://docs.github.com/en/enterprise-cloud@latest/actions/using-github-hosted-runners/using-github-hosted-runners/about-github-hosted-runners#standard-github-hosted-runners-for-public-repositories‚Ü©Ô∏é",
    "crumbs": [
      "Learn by example",
      "Snakemake example"
    ]
  },
  {
    "objectID": "sections/ci.html",
    "href": "sections/ci.html",
    "title": "Continuous Integration",
    "section": "",
    "text": "Unit testing is one of the most useful practices you can incorporate to improve your code‚Äôs quality. Testing is so important that it is best to automate the process so your tests run every time changes are made. This way, if something breaks, you can identify exactly when the code stopped working and get to the bottom of it more easily.",
    "crumbs": [
      "Learn by example",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "sections/ci.html#testing-python-code",
    "href": "sections/ci.html#testing-python-code",
    "title": "Continuous Integration",
    "section": "Testing python code",
    "text": "Testing python code\n\n\n\n.github/workflows/build-python.yml\n\nname: build python package\n\non:\n  push:\n    branches:\n      - main\n  pull_request:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n1    strategy:\n      matrix:\n2        python-version: [\"3.11\", \"3.12\"]\n\n    steps:\n      - uses: actions/checkout@v4\n      - name: Set up Python ${{ matrix.python-version }}\n        uses: actions/setup-python@v3\n3        with:\n          python-version: ${{ matrix.python-version }}\n      - name: Install dependencies\n        run: |\n          python -m pip install ./python-package[test] --upgrade pip\n      - name: Test\n        run: |\n          python -m pytest\n\n\n1\n\nUse a matrix strategy to run the job multiple times\n\n2\n\nThe build job will run once for Python version 3.11 and once for version 3.12\n\n3\n\nwith: allows you to define variables that are used by the action. The Python version from the matrix is passed along to the setup-python action.\n\n\nAdd this workflow and the example code in python-package to a new branch in your repo. Push your branch and open a pull request (PR). The workflow will begin running for your latest commit in the PR branch.",
    "crumbs": [
      "Learn by example",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "sections/ci.html#when-the-workflow-run-fails",
    "href": "sections/ci.html#when-the-workflow-run-fails",
    "title": "Continuous Integration",
    "section": "When the workflow run fails",
    "text": "When the workflow run fails\n\n\n\nlog for ‚Äúbuild python package‚Äù\n\n\nTake a look at the workflow status: a green check ‚úÖ means it passed and a red X ‚ùå means it failed. Let‚Äôs investigate the logs to find out why it failed. Click on one of the build jobs and take a look at the pytest step.\n\n\n\nlog for the failing build job\n\n\nThe output of pytest shows that one of our tests failed. Does it also fail when we run pytest locally?\n# first install the local version of the package\npip install -e ./python-package\n# then try running pytest\npython -m pytest\n============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0\nrootdir: /Users/sovacoolkl/projects/CCBR/gh-actions-sandbox\nplugins: cov-5.0.0, anyio-4.4.0\ncollected 2 items\n\npython-package/tests/test_main.py .F                                     [100%]\n\n=================================== FAILURES ===================================\n___________________________________ test_add ___________________________________\n\n    def test_add():\n&gt;       assert add(2, 3) == 5\nE       assert -1 == 5\nE        +  where -1 = add(2, 3)\n\npython-package/tests/test_main.py:7: AssertionError\n=========================== short test summary info ============================\nFAILED python-package/tests/test_main.py::test_add - assert -1 == 5\n========================= 1 failed, 1 passed in 0.03s ==========================\nOops, we seem to have a bug in our code! Edit python-package/src/mypkg/main.py and fix the bug.\n\n\n\n\n\n\nHint\n\n\n\nThere‚Äôs something wrong with the add() function.\n\n\nAfter you fix the bug and save the source file, try running pytest to make sure it‚Äôs really fixed this time:\npython -m pytest\n============================= test session starts ==============================\nplatform darwin -- Python 3.11.9, pytest-8.3.2, pluggy-1.5.0\nrootdir: /Users/sovacoolkl/projects/CCBR/gh-actions-sandbox\nplugins: cov-5.0.0, anyio-4.4.0\ncollected 2 items\n\npython-package/tests/test_main.py ..                                     [100%]\n\n============================== 2 passed in 0.02s ===============================\nGreat, all the tests passed! Now we can commit and push the fix to your branch. Notice how the workflow re-runs when you push the latest commit. Does the workflow complete successfully this time?\nYou can setup a branch protection rule1 to require that this workflow passes before Pull Requests can be merged into your default branch. This way, you can guarantee that all contributions pass the unit tests.",
    "crumbs": [
      "Learn by example",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "sections/ci.html#more-ci-workflows",
    "href": "sections/ci.html#more-ci-workflows",
    "title": "Continuous Integration",
    "section": "More CI workflows",
    "text": "More CI workflows\nTake a look at these full-featured examples for testing Python and R packages:\n\nPython (CCBR): https://github.com/CCBR/actions/blob/main/examples/build-python.yml\nR (r-lib): https://github.com/r-lib/actions/blob/v2-branch/examples/check-standard.yaml",
    "crumbs": [
      "Learn by example",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "sections/ci.html#footnotes",
    "href": "sections/ci.html#footnotes",
    "title": "Continuous Integration",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nAbout branch protection: https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches‚Ü©Ô∏é",
    "crumbs": [
      "Learn by example",
      "Continuous Integration"
    ]
  },
  {
    "objectID": "sections/conclusion.html",
    "href": "sections/conclusion.html",
    "title": "Conclusion",
    "section": "",
    "text": "GitHub Actions is a powerful platform for CI/CD and automating just about any task you want. Once you understand the basics, the best way to get started is by re-using workflows from others. We have a repository of example workflows & actions that we re-use often for CCBR projects. Take a look at CCBR Actions for example workflows that you can start using in your repositories right away.",
    "crumbs": [
      "Conclusion"
    ]
  },
  {
    "objectID": "sections/conclusion.html#resources",
    "href": "sections/conclusion.html#resources",
    "title": "Conclusion",
    "section": "Resources",
    "text": "Resources\n\nGitHub Docs https://docs.github.com/en/actions\nCCBR Actions https://github.com/ccbr/actions\nActions for R https://github.com/r-lib/actions/\nActions for Quarto https://github.com/quarto-dev/quarto-actions\nVS Code extension https://marketplace.visualstudio.com/items?itemName=github.vscode-github-actions",
    "crumbs": [
      "Conclusion"
    ]
  },
  {
    "objectID": "sections/conclusion.html#usage-limits",
    "href": "sections/conclusion.html#usage-limits",
    "title": "Conclusion",
    "section": "Usage limits",
    "text": "Usage limits\nThere are usage limits depending on your GitHub plan. Generally, if you are a free user and your repo is public, you can use GHA for free up to a certain limit. Pro, Team, and Enterprise accounts have higher spending limits, especially for private repos. Take a look at GitHub‚Äôs documentation for the most up-to-date and accurate information on usage limits for GitHub Actions: https://docs.github.com/en/actions/administering-github-actions/usage-limits-billing-and-administration#about-billing-for-github-actions",
    "crumbs": [
      "Conclusion"
    ]
  }
]