---
title: Continuous Integration
---

Unit testing is one of the most useful practices you can incorporate to improve
your code's quality.
Testing is so important that it is best to automate the process so your tests
run every time changes are made.
This way, if something breaks, you can identify exactly when the code stopped working
and get to the bottom of it more easily.

## Testing python code

[{{< fa brands github >}}](https://github.com/kelly-sovacool/gh-actions-sandbox/tree/main/.github/workflows/build-python.yml)

```yaml
name: build python package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy: # <1>
      matrix: # <1>
        python-version: ["3.11", "3.12"] # <2>

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with: # <3>
          python-version: ${{ matrix.python-version }} # <3>
      - name: Install dependencies
        run: |
          python -m pip install ./python-package[test] --upgrade pip
      - name: Test
        run: |
          python -m pytest
```
1. Use a matrix strategy to run the job multiple times
2. The build job will run once for Python version 3.11 and once for version 3.12
3. `with:` allows you to define variables that are used by the action. The Python version from the matrix is passed along to the `setup-python` action. 

Add this workflow and the example code in `python-package` to a new branch your repo.
Push your branch and open a pull request (PR).
The workflow will begin running for your latest commit in the PR branch.

## When the workflow run fails

Take a look at the workflow status: a green checkmark means it passed and a red X
means it failed.
Let's investigate the logs to find out why it failed.

It failed while running the tests with pytest.
The output of pytest shows that one of our tests failed.
Does it also fail when we run pytest locally?

```sh
python -m pytest
```

Oops, we seem to have a bug in our code!
Edit `src/mypkg/main.py` and fix the bug.
Try running pytest to make sure it's really fixed this time:

```sh
python -m pytest
```

Commit and push the changes to your branch.
Notice how the workflow re-runs when you push the latest commit.
Does the workflow complete successfully this time?

You can setup a branch protection rule^[<https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/about-protected-branches>]
to require that this workflow passes before Pull Requests can be merged into `main`.
This way, you can guarantee that all contributions pass the unit tests.
